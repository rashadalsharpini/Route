@model System.Collections.Generic.IEnumerable<BusinessLogic.DataTransferObjects.EmployeeDtos.EmployeeGetAll>

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}


<h1>All Employees</h1>
<br />
<br />
<a class="btn btn-primary" asp-controller="Employee" asp-action="Create">Create Employee</a>
<br />

<div class="m-2">
    <form asp-action="index" class="row offset-2"  method="get">
        <div class="col-8">
            <input id="searchBox" class="form-control" type="text" name="EmployeeSearchName" placeholder="Search Employee By Name"/>
        </div>
        <div class="col-4">
            <input  type="submit" class="btn btn-outline-success" value="Search"/>

        </div>
    </form>

</div>







@if (Model.Any())
{
    <table class="table table-striped table-hover mt-3">
        <thead class="text-center">
        <tr>
            <th>@Html.DisplayNameFor(e => e.Name)</th>
            <th>@Html.DisplayNameFor(e => e.Email)</th>
            <th>@Html.DisplayNameFor(e => e.EmpType)</th>
            <th>@Html.DisplayNameFor(e => e.Age)</th>
            <th>@Html.DisplayNameFor(e => e.DepartmentName)</th>
            <th>@Html.DisplayNameFor(e => e.Salary)</th>
            <th>@Html.DisplayNameFor(e => e.IsActive)</th>
            <th>@Html.DisplayNameFor(e => e.EmpGender)</th>
            <th>Details </th>
            <th>Update</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody class="text-center" id="employeeTable">
        @foreach (var employee in Model)
        {
            <tr>

                <td>@employee.Name</td>
                <td>@employee.Email</td>
                <td>@employee.EmpType</td>
                <td>@employee.Age</td>
                <td>@(string.IsNullOrEmpty(employee.DepartmentName) ? "No Department" : employee.DepartmentName)</td>
                <td>@Html.DisplayFor(e=>employee.Salary)</td>
                <td>
                    <i class="fa @(employee.IsActive?"fa-solid fa-circle-check text-success":"fa-solid fa-circle-xmark text-danger")"></i>
                </td>
                <td>@employee.EmpGender</td>

                
                
                @* @Html.RenderPartialAsync("_Buttons", employee.Id) *@
                <partial name="_Buttons" model="employee.Id" />
                
                <td>
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#DeleteModal-@employee.Id">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                    <div class="modal fade" id="DeleteModal-@employee.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Employee</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    Are You Sure to Delete this Employee @employee.Name?
                                    
                                </div>
                                <div class="modal-footer">
                                    <form asp-action="Delete" asp-controller="Employee" asp-route-id="@employee.Id" class="mt-4">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <input type="submit" value="Delete" class="btn btn-danger" />
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>

            </tr>
        }
        </tbody>
    </table>
    
    <script>
    const searchBox = document.getElementById('searchBox');
    const tableBody = document.getElementById('employeeTable');

    searchBox.addEventListener('input', function () {
        const query = this.value;

        fetch(`@Url.Action("Index", "Employee")?employeeSearchName=${encodeURIComponent(query)}`, {
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        })
        .then(res => res.text())
        .then(html => {
            // Extract the new rows from the returned HTML
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            const newRows = doc.querySelector("#employeeTable").innerHTML;

            tableBody.innerHTML = newRows;
        });
    });
</script>
}
else
{
    <div class="alert alert-info mt-3">
        <h2>No Employees Found !!</h2>
    </div>
}
